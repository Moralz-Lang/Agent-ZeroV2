
# **Overview Of Local AI Vulnerability Scanning Agent**

## Table of Contents

1. Overview
2. Purpose & Capabilities
3. System Requirements
4. Folder Structure
5. Installation
6. Virtual Environment Setup
7. Python Dependencies
8. CVE Database Update & JSON Handling
9. Pattern Generation from CVEs
10. Pattern YAML Format Explained
11. Semantic Classification with FAISS & Transformers
12. Running the Scanner
13. Manual Execution & Debugging
14. Automating CVE & Pattern Updates (Cron Jobs)
15. Viewing Logs & Troubleshooting
16. Docker Usage
17. Key Features
18. Improvements & Fixes in This Version
19. Where This Agent Shines Best
20. Contributing & GitHub Integration
21. Security & Safety Notes
22. Future Recommendations
23. References & Resources

---

## 1. **Overview**

This **Local AI Vulnerability Scanning Agent** is designed to automatically:

* Download CVE feeds from NVD (National Vulnerability Database)
* Parse CVE JSON to identify relevant vulnerabilities such as **XSS, SQLi, RCE**
* Generate and update **rules/patterns.yml** with test payloads
* Use **FAISS** and **sentence-transformers** to semantically classify CVEs
* Scan local configurations and web targets for vulnerabilities
* Provide **simulation-only payload testing** to prevent unsafe operations

The agent is **modular**, **extensible**, and **automatable**, making it a practical tool for researchers, pentesters, and security enthusiasts.

---

## 2. **Purpose & Capabilities**

* **Primary purpose:** Maintain a local CVE database, generate dynamic test patterns, and simulate attacks to detect vulnerabilities.
* **Capabilities:**

  * Detect common vulnerabilities: XSS, SQLi, buffer overflows, RCE
  * Map CVEs to YAML rules automatically
  * Filter CVEs by software versions
  * Use embeddings to classify vulnerabilities semantically
  * Log updates and scan results for auditing

---

## 3. **System Requirements**

* Ubuntu 22.04+ or any Linux distribution
* Python 3.12+
* Docker (for web container simulations)
* 4GB RAM minimum, 8GB+ recommended for large CVE datasets

---

## 4. **Folder Structure**

```
local-ai-agent/
├─ ai_agent.py               # Main orchestration script
├─ scanner.py                # Core scanning script
├─ generate_patterns.py      # Generate YAML patterns from CVE JSON
├─ update_cve_db.py          # Downloads and updates CVE database
├─ build_index.py            # Builds FAISS embeddings index
├─ rules/
│   └─ patterns.yml          # Vulnerability patterns YAML
├─ data/
│   └─ nvd/
│       └─ recent.json       # NVD JSON feed
├─ logs/                     # Cron/log output
├─ venv/                     # Python virtual environment
└─ Dockerfile / docker-compose.yml
```

---

## 5. **Installation**

1. Clone repository:

```bash
git clone https://github.com/<your-username>/local-ai-agent.git
cd local-ai-agent
```

2. Create and activate **virtual environment**:

```bash
python3 -m venv venv
source venv/bin/activate
```

3. Install Python dependencies:

```bash
python -m pip install --upgrade pip setuptools wheel
python -m pip install -r requirements.txt
```

---

## 6. **Virtual Environment Setup**

* **Purpose:** Keeps dependencies isolated
* **Command:**

```bash
python3 -m venv venv
source venv/bin/activate
```

* Always run the agent from the activated `venv`

---

## 7. **Python Dependencies**

Current versions:

```
docker==7.1.0
requests==2.32.3
faiss-cpu==1.12.0
sentence-transformers==5.1.0
numpy==1.26.4
regex==2024.7.24
PyYAML==6.0.2
paramiko==3.4.0
bandit==1.7.9
```

* **faiss-cpu** → vector indexing for semantic similarity
* **sentence-transformers** → generate embeddings for CVE descriptions
* **requests** → HTTP downloads of NVD feeds
* **PyYAML** → read/write rules YAML
* **Docker** → run vulnerable web containers locally

---

## 8. **CVE Database Update & JSON Handling**

`update_cve_db.py`:

* Downloads NVD 2.0 feed
* Optional SHA256 verification
* Extracts JSON to `data/nvd/recent.json`
* Handles missing SHA256 gracefully

**Changes / Fixes:**

* Added SHA256 optional handling
* Added `gzip` extraction with overwrite
* Uses absolute paths to avoid file-not-found errors

---

## 9. **Pattern Generation from CVEs**

`generate_patterns.py`:

* Reads CVE JSON (`data/nvd/recent.json`)
* Searches descriptions for **XSS, SQLi, RCE**
* Maps CVEs to YAML patterns
* Adds fields:

  * `simulation_only: true`
  * `method: GET/POST`
  * `parameter: input` (default)
* Filters by **TARGET\_SOFTWARE** or version ranges

**Example YAML:**

```yaml
- name: cve-2025-1111
  description: "Login form fails to sanitize input, allows XSS attacks"
  payloads:
    - "<script>alert(1)</script>"
  method: GET
  parameter: q
  simulation_only: true
```

**Fixes:**

* Previous script failed because `patterns.yml` was a dict (`patterns: []`). Now flattened to list of dicts or updated parser to handle dict format.
* Added semantic classification via **FAISS + sentence-transformers**.

---

## 10. **Pattern YAML Format Explained**

| Field             | Description                            |
| ----------------- | -------------------------------------- |
| `name`            | Unique CVE ID or pattern name          |
| `description`     | Short description of the vulnerability |
| `payloads`        | List of payloads to simulate           |
| `method`          | HTTP method (GET/POST)                 |
| `parameter`       | Target parameter in request            |
| `simulation_only` | Marks safe execution only              |

---

## 11. **Semantic Classification**

* **FAISS:** Vector database for similarity search
* **sentence-transformers:** Converts CVE descriptions into embeddings
* **Purpose:** Identify CVEs semantically related to software even if keywords differ
* **Benefit:** Automatically classify new CVEs into XSS, SQLi, RCE categories without hard-coded keywords

---

## 12. **Running the Scanner**

1. Start vulnerable web container:

```bash
docker run -d --name lab-web -p 8080:80 vuln-apache
docker ps --filter "name=lab-web"
```

2. Run scanner:

```bash
python scanner.py
# or
python ai_agent.py --update-cve --scan rules/static/sample-configs/apache.conf rules/static/sample-configs/mysql.cnf --simulate "http://localhost:8080/"
```

**Expected Output:**

* Updated CVE DB
* Generated/updated `rules/patterns.yml`
* Scan results with `[+] Exploit attempted...`

---

## 13. **Manual Execution & Debugging**

* Run update scripts individually to verify:

```bash
python update_cve_db.py
python generate_patterns.py
python build_index.py
python scanner.py
```

* Check `rules/patterns.yml` structure:

```bash
cat rules/patterns.yml | head -n 50
```

* Use `sed` if needed to inspect ranges:

```bash
sed -n '1,120p' rules/patterns.yml
```

---

## 14. **Automating CVE & Pattern Updates (Cron Jobs)**

**Crontab Example:**

```cron
# Update CVE DB daily at 03:00
0 3 * * * /home/vboxuser/local-ai-agent/venv/bin/python /home/vboxuser/local-ai-agent/update_cve_db.py >> /home/vboxuser/local-ai-agent/logs/cve_update.log 2>&1

# Generate patterns at 05:00
0 5 * * * /home/vboxuser/local-ai-agent/venv/bin/python /home/vboxuser/local-ai-agent/generate_patterns.py >> /home/vboxuser/local-ai-agent/logs/pattern_update.log 2>&1

# Build index at 06:00
0 6 * * * /home/vboxuser/local-ai-agent/venv/bin/python /home/vboxuser/local-ai-agent/build_index.py >> /home/vboxuser/local-ai-agent/logs/index_build.log 2>&1
```

* Ensure `logs` directory exists:

```bash
mkdir -p logs
```

---

## 15. **Viewing Logs & Troubleshooting**

```bash
# Full log
cat logs/cve_update.log

# Tail last 50 lines
tail -n 50 logs/pattern_update.log

# Follow in real-time
tail -f logs/index_build.log
```

* If logs missing → manually run scripts once to generate them
* Add debug prints to scripts if necessary

---

## 16. **Docker Usage**

* Run test web container:

```bash
docker run -d --name lab-web -p 8080:80 vuln-apache
```

* If container already exists:

```bash
docker rm -f lab-web
docker run -d --name lab-web -p 8080:80 vuln-apache
```

* Scan against container:

```bash
python ai_agent.py --simulate "http://localhost:8080/"
```

---

## 17. **Key Features**

* Automatic CVE parsing & classification
* YAML pattern generation
* FAISS + sentence-transformers semantic search
* Version filtering for targeted CVEs
* Simulation-only mode for safety
* Cron automation
* Docker integration for isolated test environments

---

## 18. **Improvements & Fixes**

* **SHA256 optional verification** added to `update_cve_db.py`
* **Flattened patterns.yml** parser to fix `KeyError: 'regex'`
* **Semantic classification** using FAISS + sentence-transformers
* **Simulation-only field** added to avoid unsafe payloads
* **Version & software filtering** added
* Logs directory integration for cron jobs
* Manual run instructions for immediate testing

---

## 19. **Where This Agent Shines Best**

* Testing **web applications** for common vulnerabilities
* Automating **CVE tracking** locally
* Generating **dynamic test patterns**
* Semantic detection of new CVEs affecting your software
* Safe testing via simulation payloads
* Integrating with **PHP, JavaScript, React, Node.js frameworks** via simulated HTTP requests
* Learning and experimentation for **security research**

---

## 20. **Contributing & GitHub Integration**

1. Initialize git repo:

```bash
git init
git add .
git commit -m "Initial commit: updated agent with semantic CVE classification and cron automation"
git branch -M main
git remote add origin https://github.com/<your-username>/local-ai-agent.git
git push -u origin main
```

2. Add instructions in README (this file) for other users
3. Users can clone, create venv, install requirements, and run scripts immediately

---

## 21. **Security & Safety Notes**

* **simulation\_only: true** prevents execution of destructive payloads
* Always test in **isolated environments** (Docker)
* Avoid running against production systems without explicit permission
* CVE payloads are examples; adjust for your target safely

---

## 22. **Future Recommendations**

* Integrate **continuous updates** via webhooks or API
* Enhance semantic search with **multi-language CVE parsing**
* Add **auto-version mapping** for PHP/Node.js/Python frameworks
* Build **reporting dashboard** for scan results
* Add **integration with vulnerability scanners** like OWASP ZAP or Nikto

---

## 23. **References & Resources**

* [NVD CVE JSON 2.0](https://nvd.nist.gov/)
* [FAISS GitHub](https://github.com/facebookresearch/faiss)
* [Sentence Transformers](https://www.sbert.net/)
* [Python Requests Documentation](https://docs.python-requests.org/)
* [PyYAML Documentation](https://pyyaml.org/)

---

### ✅ **Summary**

This agent now:

* Downloads and parses CVEs automatically
* Generates YAML rules dynamically
* Uses embeddings to classify vulnerabilities semantically
* Provides safe, simulation-only test payloads
* Can run manually or on cron schedules
* Supports Docker web environment testing
* Logs all outputs for auditing

All changes and fixes have been integrated to make the agent **stable, safe, and extensible**.


